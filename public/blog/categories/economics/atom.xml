<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Economics | Alex Kyllo]]></title>
  <link href="http://alexkyllo.com/blog/categories/economics/atom.xml" rel="self"/>
  <link href="http://alexkyllo.com/"/>
  <updated>2015-08-06T21:41:33-07:00</updated>
  <id>http://alexkyllo.com/</id>
  <author>
    <name><![CDATA[Alex Kyllo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Breathing Through Tubes]]></title>
    <link href="http://alexkyllo.com/blog/2013/04/06/breathing-through-tubes/"/>
    <updated>2013-04-06T19:58:00-07:00</updated>
    <id>http://alexkyllo.com/blog/2013/04/06/breathing-through-tubes</id>
    <content type="html"><![CDATA[<p>I&rsquo;ll start this post off with a quote that inspired it, from Paul Graham&rsquo;s 2012 essay <a href="http://www.paulgraham.com/property.html">Defining Property</a>:</p>

<blockquote><p>The record labels and movie studios used to distribute what they made like air shipped through tubes on a moon base. But with the
arrival of networks, it&rsquo;s as if we&rsquo;ve moved to a planet with a breathable atmosphere. Data moves like smells now. And through a
combination of wishful thinking and short-term greed, the labels and studios have put themselves in the position of the food shop
owner, accusing us all of stealing their smells.</p></blockquote>

<p>By comparing digital data to air, and comparing songs and movies to smells emanating from a restaurant, Graham is making the point that it just doesn&rsquo;t work to charge for copies of media content anymore, at least without &ldquo;warping society&rdquo; by successfully lobbying for laws that force us to use obsolete technology. &ldquo;Companies selling smells on the moon base could continue to sell them on the Earth, if they lobbied successfully for laws requiring us all to continue to breathe through tubes down here too, even though we no longer needed to,&rdquo; says Graham. And that is exactly what the MPAA and RIAA have done with the DMCA (Digital Millenium Copyright Act).</p>

<p>Since I read this essay, I&rsquo;ve been thinking intellectual property (IP) in the tech economy in a broader sense for a while now, and the overwhelming feeling I get is that our system is not just flawed, but <em>broken</em>. Finding a reasonable and equitable solution to this problem is going to be major challenge and a test of our society, as property rights are a key component of the &ldquo;grand bargain&rdquo; in which we all participate as a society.</p>

<p>Now, we&rsquo;ve all known about the filesharing debate since Napster, (then its clones like Kazaa, Morpheus, Limewire), and later, BitTorrent. The RIAA and MPAA were victorious in having peer-to-peer sharing of digital representations of copyrighted works declared illegal and file-sharers selectively punished with six-figure fines to make an example of them. Yet this was somewhat of a pyrrhic victory as it made these organizations widely reviled by their own customers. Napster et al were forced to innovate in order to stay above-board, so they pivoted and negotiated licensing deals to become paid subscription services. With newer entrants like Pandora and Spotify experiencing success, this is now a proven business model. Meanwhile Hulu, Netflix and others are doing the same for movies and TV. People may not be willing to pay high per-file costs for digital copies, but they are willing to pay for convenience of having content easily streamed to any device. And although these services are legal and properly licensed, it is important to remember that the content owners fought tooth-and-nail to suppress them. They are still fighting further innovations to protect their profits, only giving in to each new technology when it becomes truly inevitable. Therefore the &ldquo;cutting edge&rdquo; in this market is always outside the law, and this has a chilling effect on innovation. Meanwhile these organizations continue to lobby to introduce legislation like <a href="http://en.wikipedia.org/wiki/Stop_Online_Piracy_Act">SOPA</a> to grant themselves the power to censor the internet and expand criminal penalties for sharing copyrighted data.</p>

<p>In addition to legal threats and censorship, another strategy that content owners use to protect their copyrights is by using DRM (Digital Rights Management), a catchall name for anti-copying encryption software. Of course this sparked a bit of an arms race, as each time they implement a new DRM system, users always find a way to crack it. So they have had to make cracking the code illegal as well. This led to a less-publicized but still very important copyright battle in the <a href="http://en.wikipedia.org/wiki/DeCSS">DeCSS</a> affair, which led to a criminal trial in Norway, along with the <a href="http://en.wikipedia.org/wiki/AACS_encryption_key_controversy">AACS encryption key controversy</a>, which provoked the MPAA and AACS to serve many websites with DMCA demand notices. These incidents involved people sharing source code and encryption keys for cracking HD-DVD players, represented as hexadecimal numbers, giving rise to the concept of <a href="http://en.wikipedia.org/wiki/Illegal_number">Illegal numbers</a>. The concept is that since <em>any</em> information, including executable computer programs and copyrighted content, can be represented as a number, some numbers are themselves secret and protected by copyright, making them illegal to distribute or even to possess. That&rsquo;s right, the number 99,206,706,771,272,430,000 for example is <em>contraband</em>. Users correctly saw this as a threat to free speech, and in response to attempted censorship, they spread it and other &ldquo;illegal numbers&rdquo; all over the internet, to the point where they were impossible to contain. Meanwhile the DRM encryption arms race continues, most recently with the attempt to introduce DRM into the HTML5 standard. <a href="http://www.engadget.com/2012/02/23/google-microsoft-and-netflix-want-drm-like-encryption-in-html5/">This particular effort is even being backed by Google, Microsoft and Netflix.</a> For shame.</p>

<p>I&rsquo;ve been picking on organizations like the RIAA and MPAA, but they are not the only ones who work to expand and abuse IP rights for profit. The most recent and blatant misuse of IP to suppress technological innovation, and make a fast buck in the process, is the phenomenon of &ldquo;patent trolls.&rdquo; Joel Spolsky gives <a href="http://www.joelonsoftware.com/items/2013/04/02.html">a great, brief explanation of what they are and how they are running a high-tech, legal protection racket.</a> These people have made lucrative careers of setting up shell companies, acquiring overly broad, nearly expired tech patents and abusing them to threaten actual productive companies with costly litigation if they refuse to pay their extortionate &ldquo;licensing&rdquo; fees. I do not think these trolls will last much longer, as they are now broadly reviled and have raised the ire of major Silicon Valley companies, who are starting to fight back in court and win. Judges also seem unsupportive of these trolls, if <a href="http://www.popehat.com/tag/prenda-law/">the Prenda Law case as documented at popehat.com</a> is any evidence.</p>

<p>While for the time being, there&rsquo;s basically nothing an innovative company can do to avoid drive-by litigation threats from patent trolls, on the other hand one can, with a crack legal team and a little ingenuity, find big enough loopholes in the outdated IP laws to fit a business model through. Don&rsquo;t you think that in the future, we will all eventually be watching our live TV over the internet instead of via cable? Well <a href="https://www.aereo.com/">Aereo</a> is offering that now&ndash;and not only can you watch the content live, you can also &ldquo;record&rdquo; it to watch later as you would with a DVR. Now, what is the the difference between this and downloading the content from a file-sharing service? Conceptually, almost nothing. But due to a technicality in the law, <a href="http://arstechnica.com/tech-policy/2013/04/appeals-court-upholds-legality-of-aereos-tiny-antennas-scheme/">the legality of their business model was upheld in court</a>, at least for now. Here&rsquo;s how the scheme works:</p>

<blockquote><p>In Aereo&rsquo;s server rooms are row after row of tiny antennas mounted on circuit boards. When a user wants to view or record a
television program, Aereo assigns him an antenna exclusively for his own use. And like Cablevision, when 1000 users record the
same program, Aereo creates 1,000 redundant copies.</p></blockquote>

<p>Tiny antennas&hellip; redundant copies&hellip; right. Now there is obviously no technical reason at all why it would be necessary to have thousands of redundant copies of the same content in their data center, and install one tiny antenna per customer, just to serve TV show files over the internet. But the fact that no two customers are &ldquo;sharing&rdquo; the same copy of the show is the only reason why their business model isn&rsquo;t legally considered copyright infringement. It will be very interesting to see what happens with Aereo&ndash;whether the loophole they&rsquo;ve found for themselves will be forced open wider, or whether the much larger and wealthier content distributors will find a way to use the legal system to sew it shut.</p>

<p>Originally, copyrights, trademarks, and other legal IP protections were conceived in order to encourage innovation and artistic expression by preventing someone else from misappropriating one&rsquo;s creative work as their own. Patents were designed to give inventors a head start by affording them a <em>temporary</em> monopoly on selling the technology they invented, in order to prevent a competitor from copying their invention and bringing it to market faster.</p>

<p>But what these IP protections are actually being used for, is to entrench profitable business models, and stifle competition in order to perpetuate rent-seeking behavior. See, in an efficient economy, no business can stay profitable for long without innovating, because competiting actors will use technological progress to introduce products that are incrementally better and cheaper, until your product is totally obsolete. The only way to stop that from happening, at least temporarily, is by protecting your business model with patents and copyrights, and threatening costly litigation. This is how record companies and movie studios are still able to make a fortune selling their entertainment on spinning disks, which are otherwise thoroughly obsolete. To borrow Graham&rsquo;s analogy, they are forcing us to breathe through tubes by making it illegal to breathe the air freely, so that they can continue to charge for smells.</p>

<p>I am starting to believe that weakening copyrights and patents, and strengthening our right to freely disseminate information, is a key part of how we are going to make the future more economically equitable than the present. By misusing the legal system to expand intellectual property rights and protect their profitable business models from disruptive tech innovation, these companies are exacerbating the inequitable distribution of wealth in our society. Fighting to defend our free speech rights and expand &ldquo;fair use&rdquo; protections is an important way that we are going to enable ourselves to all use technology to create wealth for ourselves and share it with each other. (Remember that wealth does not mean &ldquo;money,&rdquo; but much more generally, anything people want.)</p>

<p>The most common criticism of anti-copyright beliefs is that they are merely a thin justification for freeloading. But really, what harm is &ldquo;freeloading&rdquo; a non-exclusive good? Copying is <em>not</em> the same as stealing (or &ldquo;piracy,&rdquo; which means using violence to steal). Copying doesn&rsquo;t actually cost anyone else anything nor deprive anyone else of the ability to enjoy the information being copied. The claim that copying is depriving the content owner of the revenue equivalent to the price they charge for a copy of the media, is only valid if you accept the assertion that a copyright is and should be a perpetual, exclusive (but transferrable, for a price) license to distribute copies of a piece of information. I reject such an assertion, as that is very far from what copyrights were ever intended to be.</p>

<p>Now, if copyrights are weakened to the point that file sharing becomes legal (which I think is inevitable), I don&rsquo;t claim to know exactly what will happen to movie studios, record companies, publishing houses, etc. if technology makes it impossible to continue under their current business model of acquiring the exclusive right to sell individual copies of artists' work. But I am confident that if society values blockbuster motion pictures, smash-hit songs, and bestseller novels, we will find a way to pay for them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Digital Socialism]]></title>
    <link href="http://alexkyllo.com/blog/2013/02/28/digital-socialism/"/>
    <updated>2013-02-28T21:23:00-08:00</updated>
    <id>http://alexkyllo.com/blog/2013/02/28/digital-socialism</id>
    <content type="html"><![CDATA[<p>While my last post explained why the ability to read and write programming code is becoming the new literacy and shared some of my personal struggles in obtaining it, this post will focus on the political implications of this change, with some historical context.</p>

<p>Today I stumbled on <a href="http://www.wired.com/business/2013/02/socialist-memes-at-ted/?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3A+wired%2Findex+%28Wired%3A+Top+Stories%29">this article in Wired</a>, a mainstream tech magazine, which expressed shock at the left-leaning political content of 2013 TED talks delivered by several prominent sofware developers and computer scientists.</p>

<blockquote><p>“The robots are not going to take all our jobs in the next year or two, but over the longer term,
if we’re moving into an economy that’s heavy on technology and light on labor, and we are,
then we have to consider some more radical interventions. For example, something like the guaranteed
minimum income,” McAfee said. “That idea is probably making some people in this room uncomfortable because
it’s associated with the extreme left wing.” McAfee then flashed pictures of Marx, Lenin, and Castro,
before assuring the audience that the idea was also associated with right-wing icons Friedrich Hayek,
Richard Nixon, and Milton Friedman.</p></blockquote>

<p>Now, forget the current conservative vs. liberal quarrels of American politics today, and think about the environment that socialism and Marxist thought came from. From the late 1800&rsquo;s through the Second World War was a period of rapid industrialization and mass transition away from agriculture and hand crafts as the primary means of employment. Most of the manual, hard labor that used to be done in the fields by humans, became automated through the invention of farm equipment. At the same time, much of the craftsman labor was also automated as machines replaced traditional wood and metalworking.</p>

<p>While these innovations were responsible for massive efficiency gains and dramatically reduced goods prices, they also obsoleted millions of jobs and concentrated the lion&rsquo;s share of these wealth gains into the hands of the early capitalists who invested in such technology.</p>

<p>While this economic shift caused mass unemployment for those whose jobs were automated away, this was temporary because human labor was still a primary input in the industrial process. Factories and mills became the normal workplace for most.</p>

<p>The problem with this system was that humans were treated as industrial inputs and in order to maximize profit, factory owners ground them to dust with long hours, dangerous conditions, and low wages. Public opinion bristled at the unfairness of this arrangement, and so the Marxist worldview became very popular for a while. The idea that exploited factory workers could band together and sieze control of the means of production, so that everyone could enjoy a fairer slice of in the wealth it produced, was a powerful and appealing one at the time. It was only after WWII, when we saw the Soviet Union&rsquo;s experiment begin to falter and devolve into corruption under the dictatorship of Stalin, that this ideology fell completely out of favor in the West. But it left behind a powerful legacy of collective bargaining and protective regulations, through which unionized labor, government bureaus, and NGOs were able to strike a bargain with industrial employers to give us things like weekends, overtime pay, vacation and sick days, healthcare, and safer working conditions. This allowed workers to earn enough to own their residences and enjoy leisure time, and thus the middle class was born.</p>

<p>But in the 1980s under Reagan, we began to question this bargain. Politically we were focused on winning the Cold War, as we were appalled by the oppression that took place in the USSR. We saw freedom as the opposite of Communism, and we feared giving the government too much power, lest it over-tax us and spend our hard-earned money on social programs for other, <em>lazier</em> people. (This fear also stemmed from racism, but that is another topic.) So we wondered whether the social contract was worth it, and if it wasn&rsquo;t possible instead for all of us to be little capitalists and enjoy great freedom and independence as households with minimal government involvement. The 1980s and 90s saw a corresponding growth in small businesses, entrepreneurship and venture capitalism, partly aided by technological gains (fax machines, personal computers, the internet) and financial innovations (greater access to business loans and equity sales to speculative investors) that made it much cheaper and faster to start and grow a business. And naturally, if you feel that you started something from scratch and built it yourself, you want the government sticking its hands in it as little as possible.</p>

<p>But today, as software obsoletes away more and more white-collar jobs, and companies make more profits with less headcount, we are starting to realize that &ldquo;software is eating the world.&rdquo; So it appears the pendulum is again starting to swing the other way, as evidenced by the recent resurgence of socialist thought among the tech community, and the gradual leftward shift in American national politics.</p>

<p>Software developers are realizing this first, because they know that if the only job that software cannot (yet?) automate away is the job of creating software itself, then the work of developing, deploying, and supporting business software will increasingly be the only type of labor readily available in the market. Software developers will become the factory workers of the digital age.</p>

<p>The industrial revolution was temporarily bad for working folk, but became quite good once workers used their numbers to assert their bargaining power, because they were still needed. But what will happen when we reach the point where a multinational, multimillion-dollar corporation no longer needs more than a handful of humans to run it?</p>

<p>Will we simply accept that we are unnecessary, because our labor was merely an overhead cost that corporate board members are happy to do away with so that they can enjoy greater profits? And we&rsquo;re left to fend for ourselves with no salaries or benefits? And do we just watch while a small, but powerful owner class becomes exponentially wealthier and devolves into an old-school aristocracy as they raise generations of children who never have to work? How long can our democracy even last under such a situation?</p>

<p>Or will it be time that we strike a new social bargain&ndash;one in which we recognize that we as a society have created enough wealth to go around, and that if we share it a little more evenly, we can finally afford to upgrade our definition of human rights to include nourishment, shelter, and basic medical care?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Literacy]]></title>
    <link href="http://alexkyllo.com/blog/2013/02/26/literacy/"/>
    <updated>2013-02-26T21:37:00-08:00</updated>
    <id>http://alexkyllo.com/blog/2013/02/26/literacy</id>
    <content type="html"><![CDATA[<p>Judging by the fact that more and more stories are bubbling up in the mainstream media about initiatives for teaching children to write computer programs, I&rsquo;ve been feeling lately that a sea change is coming.</p>

<p>Then today, I saw this video, in which Bill Gates, Mark Zuckerberg, will.i.am, and many other celebrities and successful geeks explain why learning code is A. a good idea and B. not that scary:</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/nKIu9yen5nc" frameborder="0" allowfullscreen></iframe>


<p>This video certainly downplays the challenges a bit&ndash;and not because programming languages are inscrutable gobbledygook, but simply because questions like &ldquo;Where should I start?&rdquo;, &ldquo;What language(s) should I study?&rdquo;, and &ldquo;What sort of program do I want to make?&rdquo; are actually very difficult to answer.</p>

<p>But this video does point out two key concepts very well:</p>

<ul>
<li>You don&rsquo;t have to be a computer scientist or a nerd to learn how to program&ndash;it is just like any other skill, and even like literacy (&ldquo;You don&rsquo;t have to be a genius to code&ndash;do you have to be a genius to read?&rdquo;)</li>
<li>People who don&rsquo;t learn how to program anything at all are going to be left in the dust by people who do (&ldquo;You&rsquo;re going to look like you have magic powers compared to everybody else&rdquo;)</li>
</ul>


<p>I will write on the second point in the next post, but right now I can speak on the first point from my own experience. My own desire to &ldquo;learn to code&rdquo; came out of frustration in the workplace. At my last job, I couldn&rsquo;t help but be bothered by the amount of manual effort that my colleagues and I spent on creating daily, weekly, and monthly, and on-demand reports to send to managers. When I say &ldquo;reports&rdquo; I mean Excel spreadsheets. With every employee creating a report and e-mailing it to his/her manager so frequently, there had to be millions of them floating around, with none of them under any sort of version control. Most of the time report creation involved looking up various points of data in &ldquo;the system&rdquo; and somehow getting them into the spreadsheet. The savvier employees tended to look for the &ldquo;download&rdquo; or &ldquo;export to excel&rdquo; functions in the system and craft their reports from the resulting data dump, while the more computer-illiterate would type the individual values into the cells and maybe even sum them up by punching them into a calculator by hand, blissfully unaware of Excel functions or even copy/paste.</p>

<p>Now I had never &ldquo;programmed&rdquo; before, the closest thing I did beforehand was Excel functions like SUM or VLOOKUP, and making a few static HTML pages for hosting my resume online when I was in college. But something in me screamed, &ldquo;There must be a better way to do this!&rdquo; So without much of a clue what I was doing, I opened up Access to create a database for sales leads and asked my coworkers to input the leads in there so we could keep track of them over time, instead of sending them around in e-mailed spreadsheets.</p>

<p>Now, all I really knew about Access at this point was that it is &ldquo;a database program.&rdquo; But the desire to create reports from the database led to playing around with the Query Builder, which sucked me into learning SQL, which got me to thinking, &ldquo;What if I could actually make an application with a user interface that everyone in the office could use to pull reports on sales leads?&rdquo;</p>

<p>At that point, the question became &ldquo;What technology or programming language do I need to learn in order to do this?&rdquo; And my search for the answer led me to a basic web programming course where I learned the HTML/CSS, PHP, Javascript, and MySQL stack, which is probably still the simplest way to build a fully-functioning, database-driven web application. Surprisingly to me at the time, it is completely unnecessary to have even half a computer science degree in order to do this. You don&rsquo;t even really need a textbook. Thanks to the wealth of tutorials and references on the internet, all it takes is a computer with an internet connection, and a lot of patience for trial and error.</p>

<p>However, my desire to <em>learn more programming</em> has led me deeper and deeper into the realm of computer science and I now fear I&rsquo;m getting a bit lost in the weeds trying to learn too many different programming languages. While learning Ruby on Rails concurrently with Obj-C to make iPhone apps, Java to make Android apps, and also dabbling in Coursera courses on algorithms and functional programming, somehow seemed like a good idea at the time, the reality is that it&rsquo;s not a buffet and you do have to make some choices about what to learn. And while the internet is a great source of information, it is a terrible source of recommendation, because the hive-mind has no consensus. If you go googling &ldquo;what programming language should I learn,&rdquo; you will get a variety of answers based on personal opinion. And while this may lead you to believe that your choice of language doesn&rsquo;t matter, it actually does because some languages are great for certain purposes and terrible for others. So the only good answer to this question is &ldquo;depends.&rdquo;</p>

<p>So while I may have wasted a few months learning languages I didn&rsquo;t need to learn, or learning about programming paradigms that are far removed from business, I am now realizing that along the way I&rsquo;ve picked up a lot&ndash;I am getting fairly comfortable with the UNIX and Windows command lines, version control tools like Git, a variety of text editors like emacs and IDEs like Eclipse and XCode. I know a few tools for quickly creating basic shell scripts, desktop apps, and web apps, and have built a few of each, both for making my job easier at work, and for practice. Most importantly I have learned to identify <em>when</em> a piece of software could help solve a problem, and I am starting to learn <em>how</em> to approach that problem with software. Now the trick is going to be to take what I have learned and find another particular business problem to focus on, and sharpen a particular subset of my programming skills to the point where they become second nature.</p>

<p>This is where I&rsquo;m at after about a year since I first picked up <a href="http://www.webstepbook.com/">Web Programming Step by Step</a> with the goal of making a web app for keeping track of sales lead data at the office. I am grasping at &ldquo;literacy&rdquo; but I still have a long way to go until I will feel fully fluent.</p>
]]></content>
  </entry>
  
</feed>
